package com.xiang.pentest;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Path;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;

import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;

public class Draw extends View {
    private static final String TAG = "Draw";
    private Paint mPaint = new Paint();
    private Path mPath = new Path();
    private int count = 0;
    long time1 = 0;
    long time2 = 0;
    private int touchEvent = 2;

    List<Long> xTime;
    List<Float> pressList;

    boolean flag = true;

    public Draw(Context context, AttributeSet attrs) {
        super(context, attrs);
        mPaint.setColor(Color.BLACK);
        mPaint.setStyle(Paint.Style.STROKE);
        mPaint.setStrokeJoin(Paint.Join.ROUND);
        mPaint.setStrokeWidth(5);

    }

    @Override
    public boolean dispatchTouchEvent(MotionEvent event) {
        if (event.getToolType(0) == touchEvent) {
            if (count == 0) {
                time1 = System.currentTimeMillis();
                xTime = new LinkedList<>();
                pressList = new LinkedList<>();
                flag = true;
            }
            time2 = System.currentTimeMillis();
            // 制作时间戳表
            xTime.add(time2);
            return super.dispatchTouchEvent(event);
        }
        return true;
    }

    @Override
    public boolean onTouchEvent(final MotionEvent event) {
        final float eventX = event.getX();
        final float eventY = event.getY();

        count++;

        // 压感数值存放
        pressList.add(event.getPressure());

        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                mPath.moveTo(eventX, eventY);
                invalidate();
                return true;
            case MotionEvent.ACTION_MOVE:
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        Message message = mHandle.obtainMessage();
                        Bundle bundle = new Bundle();
                        bundle.putFloat("X", eventX);
                        bundle.putFloat("Y", eventY);
                        message.setData(bundle);
                        mHandle.sendMessage(message);
                    }
                }).start();
                break;
            case MotionEvent.ACTION_UP:
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        Message message = mHandle.obtainMessage();
                        Bundle bundle = new Bundle();
                        bundle.putFloat("X", eventX);
                        bundle.putFloat("Y", eventY);
                        message.setData(bundle);
                        mHandle.sendMessage(message);
                    }
                }).start();

                flag = false;

                break;
            default:
                return false;
        }
        return true;
    }

    public boolean getFlag() {
        return flag;
    }

    public void setFlag() {
        flag = true;
    }

    Handler mHandle = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            Bundle bundle = new Bundle();
            bundle = msg.getData();
            float X = bundle.getFloat("X");
            float Y = bundle.getFloat("Y");
            mPath.lineTo(X, Y);
            invalidate();
        }
    };


    public List<Float> getPressList() {
        if (pressList != null) {
            return pressList;
        } else {
            pressList = new LinkedList<>();
            return pressList;
        }
    }

    public void setPressList() {
        pressList = new LinkedList<>();
    }

    public long getCount() {
        long dt = time2 - time1;
        if (dt != 0) {
            // 返回秒级的点数
            return (count * 1000) / dt;
        } else {
            return 0;
        }
    }

    public void setCount() {
        count = 0;
    }

    public void setXTimeList() {
        xTime = new LinkedList<>();
    }

    public void clear() {
        if (mPath != null) {
            mPath.reset();
            invalidate();
        }
    }

    public List<Long> getXTimeList() {
        if (xTime != null) {
            return xTime;
        } else {
            xTime = new LinkedList<>();
            return xTime;
        }
    }

    @Override
    protected void onDraw(Canvas canvas) {
        canvas.drawPath(mPath, mPaint);
    }

    public void setTouchEvent() {
        if (touchEvent == 1) {
            touchEvent = 2;
        } else {
            touchEvent = 1;
        }
    }

}












